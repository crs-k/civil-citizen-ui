import * as draftStoreService from '../../../../../main/modules/draft-store/draftStoreService';
import {Claim} from '../../../../../main/common/models/claim';
import {getVulnerability} from '../../../../../main/services/features/directionsQuestionnaire/vulnerabilityService';
import {TestMessages} from '../../../../utils/errorMessageTestConstants';
import {DirectionQuestionnaire} from '../../../../../main/common/models/directionsQuestionnaire/directionQuestionnaire';
import {
  VulnerabilityQuestions,
} from '../../../../../main/common/models/directionsQuestionnaire/vulnerabilityQuestions/vulnerabilityQuestions';

jest.mock('../../../../../main/modules/draft-store');
jest.mock('../../../../../main/modules/draft-store/draftStoreService');
const mockGetCaseDataFromDraftStore = draftStoreService.getCaseDataFromStore as jest.Mock;

describe('Vulnerability Service', () => {
  describe('get vulnerability', () => {
    it('should return undefined if vulnerability is not set', async () => {
      mockGetCaseDataFromDraftStore.mockImplementation(async () => {
        return new Claim();
      });
      const vulnerability = await getVulnerability('validClaimId');

      expect(vulnerability.vulnerabilityDetails).toBeUndefined();
      expect(vulnerability.isVulnerable).toBeUndefined();
    });

    it('should return vulnerability object with isVulnerable no', async () => {
      const claim = new Claim();
      claim.directionQuestionnaire = new DirectionQuestionnaire();
      claim.directionQuestionnaire.vulnerabilityQuestions = new VulnerabilityQuestions();
      claim.directionQuestionnaire.vulnerabilityQuestions.vulnerability = {
        isVulnerable: 'No',
      };
      mockGetCaseDataFromDraftStore.mockImplementation(async () => {
        return claim;
      });
      const vulnerability = await getVulnerability('validClaimId');

      expect(vulnerability.isVulnerable).toBe('No');
      expect(vulnerability.vulnerabilityDetails).toBeUndefined();
    });

    it('should return vulnerability object with isVulnerable yes and vulnerabilityDetails', async () => {
      const claim = new Claim();
      claim.directionQuestionnaire = new DirectionQuestionnaire();
      claim.directionQuestionnaire.vulnerabilityQuestions = new VulnerabilityQuestions();
      claim.directionQuestionnaire.vulnerabilityQuestions.vulnerability = {
        isVulnerable: 'Yes',
        vulnerabilityDetails: 'my details',
      };
      mockGetCaseDataFromDraftStore.mockImplementation(async () => {
        return claim;
      });
      const vulnerability = await getVulnerability('validClaimId');

      expect(vulnerability.isVulnerable).toBe('Yes');
      expect(vulnerability.vulnerabilityDetails).toBe('my details');
    });

    it('should return an error on redis failure', async () => {
      mockGetCaseDataFromDraftStore.mockImplementation(async () => {
        throw new Error(TestMessages.REDIS_FAILURE);
      });

      await expect(getVulnerability('claimId')).rejects.toThrow(TestMessages.REDIS_FAILURE);
    });
  });
});
