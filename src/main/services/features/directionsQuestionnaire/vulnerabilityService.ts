import {getCaseDataFromStore, saveDraftClaim} from '../../../modules/draft-store/draftStoreService';
import {Vulnerability} from '../../../common/models/directionsQuestionnaire/vulnerability';
import {YesNo} from '../../../common/form/models/yesNo';
import {DirectionQuestionnaire} from '../../../common/models/directionsQuestionnaire/directionQuestionnaire';

const {Logger} = require('@hmcts/nodejs-logging');
const logger = Logger.getLogger('supportRequiredService');

export const getVulnerability = async (claimId: string): Promise<Vulnerability> => {
  try {
    const caseData = await getCaseDataFromStore(claimId);
    return (caseData?.directionQuestionnaire?.vulnerability) ? caseData.directionQuestionnaire.vulnerability :  new Vulnerability();
  } catch (error) {
    logger.error(error);
    throw error;
  }
};

export const getVulnerabilityForm = (isVulnerable: string, vulnerabilityDescription: string): Vulnerability => {
  const vulnerabilityDetails = (isVulnerable === YesNo.NO) ? '' : vulnerabilityDescription;
  return (isVulnerable) ?
    new Vulnerability(isVulnerable, vulnerabilityDetails) :
    new Vulnerability();
};

export const saveVulnerability = async (claimId: string, vulnerability: Vulnerability) => {
  try {
    const caseData = await getCaseDataFromStore(claimId);
    if (caseData?.directionQuestionnaire) {
      caseData.directionQuestionnaire = {...caseData.directionQuestionnaire, vulnerability};
    } else {
      caseData.directionQuestionnaire = {...new DirectionQuestionnaire(), vulnerability};
    }
    await saveDraftClaim(claimId, caseData);
  } catch (error) {
    logger.error(error);
    throw error;
  }
};
